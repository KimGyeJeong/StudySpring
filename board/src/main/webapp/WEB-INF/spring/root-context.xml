<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://mybatis.org/schema/mybatis-spring
	http://mybatis.org/schema/mybatis-spring-1.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/aop
  	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	">

	<!-- 0825추가 -->
	<!-- 다운로드 -->
	<bean id="fileDown" class="com.upload.util.DownloadView"></bean>

	<!-- multipart -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 사이즈 최대 10mb.. value에 -1을 주면 제한을 주지않겠다라는 의미 -->
		<property name="maxUploadSize" value="10485760"></property>
		<!-- 인코딩 방식 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- maxMemorySize. 디스크에 저장하기전에 임시파일생성할때 최대크기 설정해주는것. 사용x -->
	</bean>

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl"
			value="jdbc:log4jdbc:oracle:thin:@180.66.30.147:1521:ORCL"></property>
		<property name="username" value="testid"></property>
		<property name="password" value="1234"></property>
	</bean>

	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property> -->
	</bean>

	<!-- Mapper 스캔하도록 설정 -->
	<mybatis-spring:scan
		base-package="com.board.persistence" />

	<!-- 서비스 패키지 스캔하여, @Component, @Service 등 어노테이션 붙은 클래스 스프링 빈으로 등록하도록 설정 
		(빈으로 등록해야 객체가 생성되고 메서드 실행 가능) -->
	<context:component-scan
		base-package="com.board.service"></context:component-scan>


	<!-- 0826 aopconfig,bean추가 -->
	<bean id="advice" class="com.board.aop.Advice"></bean>

	<!-- aop 어노테이션 설정 -->
	<!-- 해당 패키지 안에있는 @component어노테이션 붙은 클래스 스프링 빈으로 등록 -->
	<context:component-scan
		base-package="com.board.aop"></context:component-scan>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	
	<!-- <aop:config> -->
	<!--<aop:pointcut id="pc1" expression="execution(public void com.board.service.TestService*.hello*(..))"/> -->
	<!-- <aop:pointcut id="pc1" expression="execution(* com.board.service.TestService*.*(..))" 
		/> <aop:aspect ref="advice"> -->
	<!-- advice는 aspect 안에 들어가게 함 -->
	<!-- 공통기능 -->
	<!-- advice안 공통기능 메서드명을 method 안에 넣어주기 advice안의 before 메서드 넣어줌. 이름 일치해야 
		함. pointcut-ref 에는 위의 aop:pointcut 것중에 어느것을 실행할건지 작성해줌 -->
	<!-- <aop:after-returning method="afterReturning" pointcut-ref="pc1"/> <aop:after-throwing 
		method="afterThrowing" pointcut-ref="pc1"/> <aop:around method="around2" 
		pointcut-ref="pc1"/> -->
	<!-- <aop:before method="before" pointcut-ref="pc1"/> <aop:after method="after" 
		pointcut-ref="pc1"/> -->
	<!-- </aop:aspect> </aop:config> -->



</beans>
